@using GroceryListHelper.Client.HelperMethods
@using GroceryListHelper.Shared.Models.CartProducts

<div role="rowheader" class="grid grid-cols-base sm:grid-cols-sm md:grid-cols-md lg:grid-cols-lg gap-2 justify-center align-middle w-full pt-2 font-semibold">
    <span class="text-center">Reorder</span>
    <span class="text-center">Collected</span>
    <div class="flex justify-center">
        <button @onclick="ChangeSortDirectionAndSortItems" class="cursor-pointer" aria-label="Sort items">
            Product
        </button>
        @if (AppState.SortDirection != SortState.None)
        {
            <img class="scale-50 h-6 dark:invert" src=@(AppState.SortDirection == SortState.Ascending ? "icons/arrow-down.svg" : "icons/arrow-up.svg") />
        }
    </div>
    <span class="text-center hidden md:block">Amount</span>
    <span class="text-center hidden sm:block">Price</span>
    <span class="text-center hidden lg:block">Total</span>
    <span></span>

    <span></span>
    <div class="flex justify-center"><button id="add-cartproduct-button" type="submit" class="btn btn-success" @onclick="AddNewProduct" aria-label="Add product">Add</button></div>
    <span>
        <input id="newproduct-name-input" type="text" list="products" class="form-control text-center" aria-label="Product name input" autocomplete="off" @bind="newProduct.Name" @onfocusout="GetItemPrice" @ref="NewProductNameBox" />
        <datalist id="products">
            @foreach (var product in AppState.StoreProducts.Where(x => !AppState.CartProducts.Select(y => y.Name).Contains(x.Name)))
            {
                <option value="@product.Name" />
            }
        </datalist>
    </span>
    <input id="newproduct-amount-input" type="number" step="1" min="1" class="form-control text-center hidden md:block" aria-label="Product amount input" @bind="newProduct.Amount" />
    <input id="newproduct-price-input" type="number" step="0.01" min="0" class="form-control text-center hidden sm:block" aria-label="Product unit price input" @bind="newProduct.UnitPrice" />
    <span></span>
</div>
<div role="rowgroup" class="relative transition-[height]" style="height: @(ShowLoading ? "5" : AppState.CartProducts.Where(x => !AppState.ShowOnlyUncollected || !x.IsCollected).Count()*3+1)rem;">
    @if (ShowLoading)
    {
        <Loader Text="Loading products" Classes="justify-center pr-12 h-12 w-full absolute top-[0.5rem] font-bold border-2" />
    }
    else
    {
        @foreach (CartProductCollectable item in AppState.CartProducts.Where(x => !AppState.ShowOnlyUncollected || !x.IsCollected))
        {
            <div role="row" class="absolute h-12 w-full grid grid-cols-base sm:grid-cols-sm md:grid-cols-md lg:grid-cols-lg transition-[top] motion-reduce:transition-none border-t-2 @GetRowClass(item)" style="top: @GetRowTop(item)rem;" @key=item.Name>
                @if (item != editingItem)
                {
                    <button class="btn btn-primary w-9 h-9 p-[2px] m-auto @(item==movingItem ? "bg-blue-800" : "")" aria-label="Reorder" @onclick="()=>Move(item)">
                        <img class="m-auto invert" src="icons/swap.svg" />
                    </button>
                    <input type="checkbox" class="scale-150 m-auto" checked="@item.IsCollected" aria-label="Product collected" @onchange=@((e)=>MarkItemCollected(e, item)) />
                    <span class="m-auto @(item.IsCollected ? "line-through" : "")" aria-label="Product name">@item.Name</span>
                    <span class="m-auto hidden md:block" aria-label="Amount">@item.Amount</span>
                    <span class="m-auto hidden sm:block" aria-label="Unit price">@item.UnitPrice.ToString("N2")</span>
                    <span class="m-auto hidden lg:block" aria-label="Total price">@((item.UnitPrice * item.Amount).ToString("N2"))</span>
                    <div class="flex">
                        <button class="btn btn-success w-9 h-9 p-[2px] m-auto hidden sm:block" @onclick="()=>StartEditItem(item)" aria-label="Edit product" disabled=@item.IsCollected>
                            <img class="m-auto invert" src="icons/edit.svg" />
                        </button>
                        <button class="btn btn-danger w-9 h-9 p-[5px] m-auto" @onclick="()=>RemoveProduct(item)" aria-label="Delete product" disabled=@item.IsCollected>
                            <img class="m-auto invert" src="icons/delete.svg" />
                        </button>
                    </div>
                }
                else
                {
                    <span></span>
                    <span></span>
                    <span class="m-auto @(item.IsCollected ? "line-through" : "")" aria-label="Product name">@item.Name</span>
                    <input type="number" step="0.01" min="0" class="form-control text-center m-auto hidden md:block" aria-label="Edit amount" @bind="item.Amount" />
                    <input type="number" step="0.01" min="0" class="form-control text-center my-auto mx-2 hidden sm:block" aria-label="Edit unit price" @bind="item.UnitPrice" />
                    <span class="m-auto hidden lg:block" aria-label="Total price">@((item.UnitPrice * item.Amount).ToString("N2"))</span>
                    <button class="btn btn-success m-auto h-9 w-9 p-1" @onclick=@(()=>UpdateCartProduct(item)) aria-label="Submit edit" disabled=@item.IsCollected>
                        <img class="m-auto invert" src="icons/check.svg" />
                    </button>
                }
            </div>
        }
    }
</div>
