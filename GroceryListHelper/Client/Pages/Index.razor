@page "/"

<h3 class="text-center">Grocery List Collector<sup> &copy;M&S Productions</sup></h3>
<h5 class="text-center">Helps you remember</h5>
<table class="table">
    <thead>
        <tr>
            <th>Collected?</th>
            <th style="min-width: 150px;">Product</th>
            <th style="min-width: 100px;">Amount</th>
            <th style="min-width: 100px;">Price</th>
            <th>Total</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><button type="submit" class="btn btn-success" @onclick="AddNewProduct" @ref="AddProductButton">Add</button></td>
            <td>
                <input type="text" list="products" class="form-control" @bind="NewProduct.Name" @onfocusout="GetItemPrice" @ref="NewProductNameBox" />
                <datalist id="products">
                    @foreach (var product in StoreProducts.Where(x => !CartProducts.Select(y => y.Name).Contains(x.Name)))
                    {
                        <option value="@product.Name" />
                    }
                </datalist>
            </td>

            <td><input type="number" step="0.01" min="0" class="form-control text-center" @bind="NewProduct.Amount" /></td>
            <td><input type="number" step="0.01" min="0" class="form-control text-center" @bind="NewProduct.UnitPrice" @onfocusout="async () => await AddProductButton.FocusAsync()" /></td>
            <td>@NewProduct.Total.ToString("N2")</td>
        </tr>
        @foreach (var item in CartProducts)
        {
            @if (item != EditingItem)
            {
                <tr style="background-color: @(item.IsCollected ? "lightgray" : "white")">
                    <td><input type="checkbox" class="checkbox" @bind="item.IsCollected" @onclick="(()=>MarkItemCollected(item))" /></td>
                    <td style="text-decoration: @(item.IsCollected ? "line-through" : "none")">@item.Name</td>
                    <td>@item.Amount</td>
                    <td>@item.UnitPrice</td>
                    <td>@item.Total.ToString("N2")</td>
                    <td><button class="btn btn-success" @onclick="()=>StartEditItem(item)"><i class="fas fa-edit"></i></button></td>
                    <td><button class="btn btn-danger" @onclick="()=>RemoveProduct(item)">X</button></td>
                </tr>
            }
            else
            {
                <tr style="background-color: @(item.IsCollected ? "lightgray" : "white")">
                    <td><input type="checkbox" class="checkbox" @bind="item.IsCollected" @onclick="(()=>MarkItemCollected(item))" /></td>
                    <td style="text-decoration: @(item.IsCollected ? "line-through" : "none")">@item.Name</td>
                    <td><input type="number" step="0.01" min="0" class="form-control text-center" @bind="item.Amount" /></td>
                    <td><input type="number" step="0.01" min="0" class="form-control text-center" @bind="item.UnitPrice" /></td>
                    <td>@item.Total.ToString("N2")</td>
                    <td><button class="btn btn-success text-nowrap" disabled="@polling" @onclick="()=>UpdateCartProduct(item)">Submit</button></td>
                    <td><button class="btn btn-danger text-nowrap" disabled="@polling" @onclick="()=>CancelProductUpdate()">Cancel</button></td>
                </tr>
            }
        }
    </tbody>
</table>

<CartSummaryRowComponent CartProducts="CartProducts" Polling="polling" ClearCartProducts="ClearCartProducts" ClearStoreProducts="ClearStoreProducts"/>

<ChooseCartShareOptionComponent SwitchShareMode="SetShareMode"/>
@if (ShareMode==ShareModeType.Self)
{
    <ShareSelfCartComponent AllowedUsers="AllowedUsers" Polling="polling" ShareCart="ShareCart" ExitCart="ExitCart"/>
}
else
{
    <JoinCartComponent CartHostEmailChanged="SetHostEmail" Polling="polling" JoinCart="JoinCart" ExitCart="ExitCart"/>
}
<p style="margin-left: 1rem;">@ShareCartInfo</p>
<Modal Header="Error occurred" Message="@Message" />
